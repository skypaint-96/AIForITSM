@page "/ProblemReport"
@using System.Text.Json
@using System.Text
@using Azure.AI.OpenAI
@using Microsoft.SemanticKernel
@using Microsoft.SemanticKernel.Connectors.AzureOpenAI
@using QuestPDF.Fluent
@using QuestPDF.Helpers
@using QuestPDF.Infrastructure
@inject ConfigurationService ConfigService
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<h3 class="text-center">ServiceNow Problem Report</h3>

<div class="container mt-4">
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger text-center" role="alert">
            @ErrorMessage
        </div>
    }

    <!-- File Upload Section -->
    <div class="row justify-content-center mt-4">
        <div class="col-md-8">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Upload Problem Records</h5>
                    <FileUploader OnFileUploaded="HandleFileUpload" AllowMultiple="true" />
                    <button class="btn btn-primary w-100 mt-3" @onclick="GenerateReport" disabled="@(!isFileUploaded || isLoading)" >
                        Generate Report
                    </button>
                </div>
            </div>
        </div>
    </div>

    <button class="btn btn-success w-100 mt-3" @onclick="ExportToPdf" disabled="@(!problemReport.Any())">
        Export Report as PDF
    </button>


    <!-- Report Section -->
    @if (problemReport != null && problemReport.Any())
    {
        <div class="mt-4">
            <h5>Generated Problem Report</h5>
            @foreach (var problem in problemReport)
            {
                <div class="card mb-4">
                    <div class="card-body">
                        <h6 class="card-title">Problem: @problem.ReferenceNumber</h6>
                        <table class="table table-bordered">
                            <tbody>
                                <tr>
                                    <th>Reference Number</th>
                                    <td>@problem.ReferenceNumber</td>
                                </tr>
                                <tr>
                                    <th>Opened Date</th>
                                    <td>@problem.OpenedDate.ToString("yyyy-MM-dd")</td>
                                </tr>
                                <tr>
                                    <th>Days Open</th>
                                    <td>@problem.DaysOpen</td>
                                </tr>
                                <tr>
                                    <th>Title</th>
                                    <td>@problem.Title</td>
                                </tr>
                                <tr>
                                    <th>Summary</th>
                                    <td>@problem.Summary</td>
                                </tr>
                                <tr>
                                    <th>Recent Updates</th>
                                    <td>@problem.RecentUpdates</td>
                                </tr>
                                <tr>
                                    <th>Comments</th>
                                    <td>
                                        <textarea class="form-control" rows="2" @bind="problem.Comments"></textarea>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            }
        </div>
    }

</div>

<script>
    function downloadFile(fileName, url) {
        const link = document.createElement("a");
        link.href = url;
        link.download = fileName;
        link.click();
    }
</script>


@code {
    private string ErrorMessage = string.Empty;
    private bool isFileUploaded = false;
    private bool isLoading = false;
    private byte[] uploadedFileContent;
    private List<ProblemRecord> problemReport = new();

    private async Task ExportToPdf()
    {
        try
        {
            // Generate the PDF content
            var pdfBytes = GeneratePdf();

            // Trigger the download in the browser
            var fileName = "ProblemReport.pdf";
            var base64 = Convert.ToBase64String(pdfBytes);
            var url = $"data:application/pdf;base64,{base64}";
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, url);
            
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred while exporting the PDF: {ex.Message}";
        }
    }

    private byte[] GeneratePdf()
    {
        using var stream = new MemoryStream();
        QuestPDF.Settings.License = LicenseType.Community;
        QuestPDF.Fluent.Document.Create(container =>
        {
            container.Page(page =>
            {
                page.Size(PageSizes.A4);
                page.Margin(1, QuestPDF.Infrastructure.Unit.Centimetre);
                page.DefaultTextStyle(x => x.FontSize(12));

                page.Header().Text("ServiceNow Problem Report").Bold().FontSize(16).AlignCenter();

                page.Content().Column(column =>
                {
                    foreach (var problem in problemReport)
                    {
                        column.Item().Text($"Problem: {problem.ReferenceNumber}").Bold().FontSize(14);

                        column.Item().Table(table =>
                        {
                            table.ColumnsDefinition(columns =>
                            {
                                columns.RelativeColumn(1);
                                columns.RelativeColumn(2);
                            });

                            table.Cell().Text("Reference Number").Bold();
                            table.Cell().Text(problem.ReferenceNumber);

                            table.Cell().Text("Opened Date").Bold();
                            table.Cell().Text(problem.OpenedDate.ToString("yyyy-MM-dd"));

                            table.Cell().Text("Days Open").Bold();
                            table.Cell().Text(problem.DaysOpen.ToString());

                            table.Cell().Text("Title").Bold();
                            table.Cell().Text(problem.Title);

                            table.Cell().Text("Summary").Bold();
                            table.Cell().Text(problem.Summary);

                            table.Cell().Text("Recent Updates").Bold();
                            table.Cell().Text(problem.RecentUpdates);

                            table.Cell().Text("Comments").Bold();
                            table.Cell().Text(problem.Comments);
                        });

                        // column.Item().Padding(0, 0, 0, 10);
                    }
                });

                page.Footer().AlignCenter().Text(x =>
                {
                    x.Span("Generated on ");
                    x.Span(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")).Bold();
                });
            });
        }).GeneratePdf(stream);

        return stream.ToArray();
    }



    private void HandleFileUpload(byte[] fileContent)
    {
        uploadedFileContent = fileContent;
        isFileUploaded = true;
    }

    private void GenerateReport()
    {
        isLoading = true;
        ErrorMessage = string.Empty;

        try
        {
            // Parse the uploaded JSON data
            string jsonData = Encoding.UTF8.GetString(uploadedFileContent);
            var problems = JsonSerializer.Deserialize<List<ProblemRecord>>(jsonData);

            if (problems == null || !problems.Any())
            {
                ErrorMessage = "The uploaded file does not contain valid problem records.";
                return;
            }

            // Process each problem record
            problemReport = problems.Select(problem => new ProblemRecord
                {
                    ReferenceNumber = problem.ReferenceNumber,
                    OpenedDate = problem.OpenedDate,
                    DaysOpen = (DateTime.UtcNow - problem.OpenedDate).Days,
                    Title = problem.Title,
                    Summary = problem.Summary,
                    RecentUpdates = GetRecentUpdatesFromAI(problem),
                    Comments = string.Empty
                }).ToList();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred while generating the report: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetRecentUpdatesFromAI(ProblemRecord problem)
    {
        // Placeholder for AI analysis logic
        // Replace this with actual AI integration to generate a summary of recent updates
        return $"AI summary for problem {problem.ReferenceNumber}";
    }

    public class ProblemRecord
    {
        public string ReferenceNumber { get; set; }
        public DateTime OpenedDate { get; set; }
        public string Title { get; set; }
        public string Summary { get; set; }
        public string RecentUpdates { get; set; }
        public string Comments { get; set; }
        public int DaysOpen { get; set; }
    }
}
