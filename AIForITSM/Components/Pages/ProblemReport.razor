@page "/ProblemReport"
@using System.Text.Json
@using System.Text
@using Azure.AI.OpenAI
@using Microsoft.SemanticKernel
@using Microsoft.SemanticKernel.Connectors.AzureOpenAI
@using QuestPDF.Fluent
@using QuestPDF.Helpers
@using QuestPDF.Infrastructure
@inject ConfigurationService ConfigService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<h3 class="text-center">ServiceNow Problem Report</h3>

<div class="container mt-4">
    <div class="container mt-4">
        <div class="no-print">
            <CompanySelector OnCompanySelected="OnCompanySelected" OnCompanyReset="OnCompanyReset" />
        </div>

        @if (isCompanySelected)
        {
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger text-center no-print" role="alert">
                    @ErrorMessage
                </div>
            }

            <!-- File Upload Section -->
            <div class="row justify-content-center mt-4 no-print">
                <div class="col-md-8">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Upload Problem Records</h5>
                            <FileUploader OnFileUploaded="HandleFileUpload" AllowMultiple="true" />
                            @if (isFileUploaded && !isLoading && (problemReport.Count == 0))
                            {
                                <button class="btn btn-primary w-100 mt-3" @onclick="GenerateReport">
                                    Generate Report
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>

            @if (problemReport.Count > 0 && !isLoading)
            {
                <button class="btn btn-primary no-print" @onclick="PrintReport">Print</button>
            }

            <div class="row justify-content-center mt-4 no-print">
                <div class="col-md-8">
                    <AIServiceSelector UseAzureService="useAzureService" UseAzureServiceChanged="OnUseAzureServiceChanged" />
                </div>
            </div>
            <div class="no-print">
                <LoadingIndicator IsLoading="isLoading" Message="Generating problem report, please wait..." />
            </div>

            <!-- Report Section -->
            @if (problemReport.Count > 0)
            {
                <div class="mb-3 no-print">
                    <label for="sortOrder" class="form-label">Sort By:</label>
                    <select id="sortOrder" class="form-select w-auto d-inline-block ms-2" @bind="selectedSortOrder">
                        <option value="priority">Priority</option>
                        <option value="summary">Summary</option>
                        <option value="investigation">Investigation Type</option>
                        <option value="age">Age</option>
                        <option value="status">Status</option>
                    </select>
                </div>
                <div class="mt-4 print-report">
                    <h5>Generated Problem Report</h5>
                    @foreach (var problem in GetFilteredAndSortedProblems())
                    {
                        <div class="card mb-4">
                            <div class="card-body">
                                <h6 class="card-title">Problem: @problem.Number</h6>
                                <table class="table table-bordered">
                                    <tbody>
                                        <tr>
                                            <th class="table-secondary">Priority</th>
                                            <td>@problem.Priority</td>
                                        </tr>
                                        <tr>
                                            <th class="table-secondary">Status</th>
                                            <td>@problem.State</td>
                                        </tr>
                                        <tr>
                                            <th class="table-secondary">Submit Date</th>
                                            <td>@problem.OpenedAt</td>
                                        </tr>
                                        <tr>
                                            <th class="table-secondary">Age</th>
                                            <td>@problem.GetAge()</td>
                                        </tr>
                                        <tr>
                                            <th class="table-secondary">Summary</th>
                                            <td>@problem.ShortDescription</td>
                                        </tr>
                                        <tr>
                                            <th class="table-secondary">Investigation Type</th>
                                            <td>@problem.UInvestigationDriver</td>
                                        </tr>
                                        <tr>
                                            <th class="table-secondary">Root Cause</th>
                                            <td>@problem.CauseNotes</td>
                                        </tr>
                                        <tr>
                                            <th class="table-secondary">Update</th>
                                            <td>
                                                @if (problem.ProblemUpdate is null)
                                                {
                                                    <span class="text-muted">Generating update...</span>
                                                }
                                                else
                                                {
                                                    <div>@problem.ProblemUpdate</div>
                                                }
                                            </td>
                                        </tr>
                                        <tr>
                                            <th class="table-secondary">Comments</th>
                                            <td>
                                                <textarea class="form-control" rows="2" @bind="problem.PRBComments"></textarea>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    }
                </div>
            }
        }
    </div>
</div>

@code {
    private string ErrorMessage = string.Empty;
    private bool isFileUploaded;
    private bool isLoading;
    private byte[]? uploadedFileContent;
    private readonly List<Problem> problemReport = new();
    private bool isCompanySelected;
    private string selectedCompany = string.Empty;
    private int pendingUpdates;

    private bool useAzureService;
    private CompanyConfig companyConfig = new();
    private Kernel? aiKernel;

    private string selectedSortOrder = "priority";

    private void OnUseAzureServiceChanged(bool value)
    {
        useAzureService = value;
        aiKernel = null;
    }

    private async Task PrintReport()
    {
        await JSRuntime.InvokeVoidAsync("window.print");
    }

    private async Task OnCompanySelected(string company)
    {
        selectedCompany = company;
        isCompanySelected = true;
        aiKernel = null;
    }

    private void OnCompanyReset()
    {
        isCompanySelected = false;
        selectedCompany = string.Empty;
        problemReport.Clear();
        isFileUploaded = false;
        ErrorMessage = string.Empty;
        aiKernel = null;
    }

    private void HandleFileUpload(byte[] fileContent)
    {
        uploadedFileContent = fileContent;
        isFileUploaded = true;
    }

    private async Task GenerateReport()
    {
        isLoading = true;
        ErrorMessage = string.Empty;

        try
        {
            if (uploadedFileContent is null)
            {
                ErrorMessage = "No file uploaded.";
                isLoading = false;
                StateHasChanged();
                return;
            }

            var problems = JsonSerializer.Deserialize<List<Problem>>(Encoding.UTF8.GetString(uploadedFileContent));

            if (problems is null || problems.Count == 0)
            {
                ErrorMessage = "No problems found in the uploaded file.";
                problemReport.Clear();
                isLoading = false;
                StateHasChanged();
                return;
            }

            await EnsureKernelAsync();

            problemReport.Clear();
            problemReport.AddRange(problems.Where(p => !string.Equals(p.State, "Closed", StringComparison.OrdinalIgnoreCase)));

            pendingUpdates = problemReport.Count;

            foreach (var problem in problemReport)
            {
                _ = GenerateAndSetProblemUpdate(problem);
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred while generating the report: {ex.Message}";
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task GenerateAndSetProblemUpdate(Problem problem)
    {
        try
        {
            problem.ProblemUpdate = await problem.GetProblemUpdateAsync(aiKernel);
        }
        catch (Exception ex)
        {
            problem.ProblemUpdate = $"AI error: {ex.Message}";
        }
        finally
        {
            if (--pendingUpdates <= 0)
            {
                isLoading = false;
            }
            StateHasChanged();
        }
    }

    private IEnumerable<Problem> GetFilteredAndSortedProblems()
    {
        var openProblems = problemReport
            .Where(p => !string.Equals(p.State, "Closed", StringComparison.OrdinalIgnoreCase));

        return selectedSortOrder switch
        {
            "priority" => openProblems.OrderBy(p => p.Priority ?? int.MaxValue),
            "summary" => openProblems.OrderBy(p => p.ShortDescription),
            "investigation" => openProblems.OrderBy(p => p.UInvestigationDriver),
            "age" => openProblems.OrderByDescending(p => p.GetAge()),
            "status" => openProblems.OrderBy(p => p.State),
            _ => openProblems
        };
    }

    private async Task EnsureKernelAsync()
    {
        if (aiKernel != null)
            return;

        var builder = Kernel.CreateBuilder();

        companyConfig = await ConfigService.GetCompanyDetailsAsync(selectedCompany);

        if (useAzureService)
        {
            companyConfig.AzureOpenAI.Model = EncryptionHelper.Decrypt(companyConfig.AzureOpenAI.Model);
            companyConfig.AzureOpenAI.Endpoint = EncryptionHelper.Decrypt(companyConfig.AzureOpenAI.Endpoint);
            companyConfig.AzureOpenAI.DeploymentName = EncryptionHelper.Decrypt(companyConfig.AzureOpenAI.DeploymentName);
            companyConfig.AzureOpenAI.ApiKey = EncryptionHelper.Decrypt(companyConfig.AzureOpenAI.ApiKey);

            builder.AddAzureOpenAIChatCompletion(
                companyConfig.AzureOpenAI.DeploymentName,
                new AzureOpenAIClient(
                    new Uri(companyConfig.AzureOpenAI.Endpoint),
                    new System.ClientModel.ApiKeyCredential(companyConfig.AzureOpenAI.ApiKey)
                )
            );
        }
        else
        {
            companyConfig.Ollama.Model = EncryptionHelper.Decrypt(companyConfig.Ollama.Model);
            companyConfig.Ollama.Endpoint = EncryptionHelper.Decrypt(companyConfig.Ollama.Endpoint);

#pragma warning disable SKEXP0070
            builder.AddOllamaChatCompletion(
                new OllamaSharp.OllamaApiClient(
                    companyConfig.Ollama.Endpoint,
                    companyConfig.Ollama.Model
                )
            );
#pragma warning restore SKEXP0070
        }

        aiKernel = builder.Build();
    }

    // Optionally remove if not used elsewhere
    private async Task GenerateProblemUpdate(Problem problem)
    {
        isLoading = true;
        ErrorMessage = string.Empty;
        try
        {
            await EnsureKernelAsync();
            problem.ProblemUpdate = await problem.GetProblemUpdateAsync(aiKernel);
        }
        catch (Exception ex)
        {
            problem.ProblemUpdate = $"AI error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}
