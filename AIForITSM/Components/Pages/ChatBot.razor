@page "/chatbot"
@using System.Text.Json
@using System.Text
@using Azure
@using Azure.AI.OpenAI
@using Azure.Core
@using Azure.Identity
@using Microsoft.SemanticKernel
@using Microsoft.SemanticKernel.ChatCompletion;
@using Microsoft.SemanticKernel.Connectors.AzureOpenAI;
@using Microsoft.SemanticKernel.Connectors.Ollama;
@using OllamaSharp
@inject ConfigurationService ConfigService
@rendermode InteractiveServer

<h3 class="text-center">Chat Bot</h3>

<div class="container mt-4">
    <CompanySelector OnCompanySelected="OnCompanySelected" OnCompanyReset="OnCompanyReset" />
    @if (isChatSessionStarted)
    {
        <!-- Chat Interface -->
        <div class="row justify-content-center">
            <div class="col-md-8">
                <!-- Chat History -->
                <div class="card" style="height: 400px; overflow-y: auto;">
                    <div class="card-body">
                        <div id="chatHistory">
                            @* @if (useAzureService)
                            {
                                @foreach (var message in GetCurrentAzureOpenAiChat().Messages)
                                {
                                    <div class="mb-2">
                                        <strong>@message.Role:</strong> @message.Content
                                    </div>
                                }
                            }
                            else
                            { *@
                            @foreach (var message in chatHistory)
                            {
                                <div class="mb-2">
                                    <strong>@message.Role:</strong> @message.Content
                                </div>
                            }
                            @* } *@
                        </div>
                    </div>
                </div>

                <!-- Input Area -->
                <div class="mt-3">
                    <div class="input-group">
                        <input @bind="userInput" @bind:event="oninput" @onkeydown="HandleKeyDown" type="text" class="form-control" placeholder="Type your message here..." />
                        <button class="btn btn-primary" @onclick="SendMessage">Send</button>
                    </div>
                    <div class="form-check form-switch mt-2">
                        <input class="form-check-input" type="checkbox" id="serviceToggle" @bind="useAzureService" />
                        <label class="form-check-label" for="serviceToggle">
                            @if (useAzureService)
                            {
                                <span>Azure OpenAI</span>
                            }
                            else
                            {
                                <span>Local (Ollama)</span>
                            }
                        </label>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    #pragma warning disable SKEXP0001
    IChatCompletionService _ollamaChatCompletionService = new OllamaApiClient("http://example.com", "asdfsa").AsChatCompletionService();
#pragma warning restore SKEXP0001
    AzureOpenAIChatCompletionService _azureOpenAIChatCompletionService = new AzureOpenAIChatCompletionService("dasfddsf", new AzureOpenAIClient(new Uri("http://example.com"), new DefaultAzureCredential()));


    private bool isChatSessionStarted = false;
    private string selectedCompany = string.Empty;
    private string userInput = string.Empty;
    private bool useAzureService = false;
    private ChatHistory chatHistory = new ChatHistory();
    private CompanyConfig companyConfig = new CompanyConfig();
    IChatCompletionService chatService
    {
        get
        {
            return useAzureService ? _azureOpenAIChatCompletionService : _ollamaChatCompletionService;
        }
    }

    private async Task OnCompanySelected(string company)
    {
        selectedCompany = company;
        isChatSessionStarted = true;
        companyConfig = await ConfigService.GetCompanyDetailsAsync(selectedCompany);
        companyConfig.Ollama.Model = EncryptionHelper.Decrypt(companyConfig.Ollama.Model);
        companyConfig.Ollama.Endpoint = EncryptionHelper.Decrypt(companyConfig.Ollama.Endpoint);
        companyConfig.AzureOpenAI.Model = EncryptionHelper.Decrypt(companyConfig.AzureOpenAI.Model);
        companyConfig.AzureOpenAI.Endpoint = EncryptionHelper.Decrypt(companyConfig.AzureOpenAI.Endpoint);
        companyConfig.AzureOpenAI.DeploymentName = EncryptionHelper.Decrypt(companyConfig.AzureOpenAI.DeploymentName);
        companyConfig.AzureOpenAI.ApiKey = EncryptionHelper.Decrypt(companyConfig.AzureOpenAI.ApiKey);
#pragma warning disable SKEXP0001
        _ollamaChatCompletionService = new OllamaApiClient(companyConfig.Ollama.Endpoint, companyConfig.Ollama.Model).AsChatCompletionService();
#pragma warning restore SKEXP0001
        _azureOpenAIChatCompletionService = new AzureOpenAIChatCompletionService(companyConfig.AzureOpenAI.DeploymentName, new AzureOpenAIClient(new Uri(companyConfig.AzureOpenAI.Endpoint), new AzureKeyCredential(companyConfig.AzureOpenAI.ApiKey)));
    }
    private void OnCompanyReset()
    {
        isChatSessionStarted = false;
        selectedCompany = string.Empty;
        chatHistory.Clear();
    }
    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(userInput))
        {
            chatHistory.AddUserMessage(userInput);
            var assistantMessage = new ChatMessageContent();
            assistantMessage.Role = AuthorRole.Assistant;
            chatHistory.Add(assistantMessage);
            userInput = string.Empty;
            StateHasChanged();
            //var response = await chatService.GetChatMessageContentsAsync(chatHistory);
            await foreach(var item in chatService.GetStreamingChatMessageContentsAsync(chatHistory))
            {
                if (!string.IsNullOrEmpty(item.Content))
                {
                    assistantMessage.Content += item.Content;
                    //chatHistory.AddAssistantMessage(item.Content);
                    StateHasChanged();
                }
            }
        }
    }
    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SendMessage();
        }
    }

}
